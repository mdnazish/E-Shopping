<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- To avoid RE: No bean named 'dataSource' available & to assign a name to @Bean("dataSource") created before. -->
	<context:component-scan base-package="com.mn.eshoppingbackend" />
	
	<!-- add seperate http element
	 	- to allow loading of static resources for the login page which doesn't require any default form of security. -->
	 <http pattern="/resources/**" security="none"/>
	
	<!-- To enable spring security, we need to add HTTP element -->
	<!-- 
		pattern					examples
		=======					========
		/*							/abc or /def or /pqr
		/**							/abc/pqr or /abc/mno/pqr & etc...
		Similarlly,
		/abc/*						/abc/mno or /abc/pqr or /abc/def 
		/abc/**						/abc/pqr or /abc/pqr/mno & etc...
	 -->
	<http>
		<!-- To give login access to all the Website User [Order is same as given below for "intercept-url" attribute]-->
		
		<!--  For Demonstration -->
		<!--
		<intercept-url pattern="/login" access="permitAll"/>
		<intercept-url pattern="/**" access="hasAuthority('USER')" />
		<form-login login-page="/login" />
		 -->
		
		<!-- Only ADMIN can access -->
		<intercept-url pattern="/manage/**" access="hasAuthority('ADMIN')"/>
		
		<!-- Only USER can access (who is registered with this site)-->
		<intercept-url pattern="/cart/**" access="hasAuthority('USER')"/>
		
		<!-- Rest of the Users -->
		<intercept-url pattern="/**" access="permitAll" />
		<form-login login-page="/login" />
		
		<!-- To handle errors login permission -->
		<access-denied-handler error-page="/access-denied"/>
		
		<!-- To avoid client-side error - HTTP Status 403: couldn't verify the provided CSRF token because your session was not found. 
			Solution-1: write below <csrf disabled="true"/>  OR
			Solution-2: add <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" /> 
						in login.jsp login button line
		-->
		
		<!-- <csrf disabled="true"/>	 -->
		
		<logout />
	</http>
	
	<authentication-manager>
		<authentication-provider>
			<!-- <user-service> <user name="rashid" password="rashid" authorities="USER, 
				ADMIN" /> </user-service> -->

			<!-- To fetch credential from DB using Hibernate & configure as @Bean("dataSource") 
				in HibernateConfig file -->
			<jdbc-user-service  data-source-ref="dataSource"
								users-by-username-query="SELECT email, password, enabled from USER_DETAIL WHERE email=?"
								authorities-by-username-query="SELECT email, role from USER_DETAIL WHERE email=?" />
		</authentication-provider>
	</authentication-manager>

</beans:beans>